/**
 * This file is part of OGEMA.
 *
 * OGEMA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * as published by the Free Software Foundation.
 *
 * OGEMA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OGEMA. If not, see <http://www.gnu.org/licenses/>.
 */
package org.ogema.core.rads.change;

import org.ogema.core.administration.AdminApplication;
import org.ogema.core.application.ApplicationManager;

import org.ogema.core.model.Resource;
import org.ogema.core.resourcemanager.CompoundResourceEvent;
import org.ogema.core.resourcemanager.ResourceValueListener;
import org.ogema.resourcetree.listeners.DefaultCompoundEvent;
import org.ogema.resourcetree.listeners.InternalValueChangedListenerRegistration;

/**
 * Represents a listener registration generated by a call to
 * {@link Resource#addValueListener(org.ogema.core.resourcemanager.ResourceValueListener) }.
 *
 */
// TODO check: no longer implements ResourceListenerRegistration
public class PatternValueChangeListener extends InternalValueChangedListenerRegistration implements ResourceValueListener<Resource> {

	private final Resource target;
	private final boolean callOnEveryUpdate;
	private final ApplicationManager am;
	private final PatternChangeListenerRegistration patternListener;

	public PatternValueChangeListener(Resource origin, boolean callOnEveryUpdate, ApplicationManager am, PatternChangeListenerRegistration patternListener) {
		this.target = origin;
		this.callOnEveryUpdate = callOnEveryUpdate;
		this.am = am;
		this.patternListener = patternListener;
	}

	@Override
	public void queueResourceChangedEvent(final Resource r, boolean valueChanged) {
		if (!callOnEveryUpdate && !valueChanged) {
			return;
		}
		//ValueEvent ve = new ValueEventImpl(r);
        CompoundResourceEvent<?> e = DefaultCompoundEvent.createResourceUpdatedEvent(r, null, null, valueChanged);
		patternListener.trigger(e);
	}

	@Override
	public Resource getResource() {
		return target;
	}

	@Override
	public AdminApplication getApplication() {
		return am.getAdministrationManager().getAppById(am.getAppID().getIDString());
	}

	@Override
	public boolean isCallOnEveryUpdate() {
		return callOnEveryUpdate;
	}

	@Override
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public <T extends Resource> ResourceValueListener<T> getValueListener() {
		return (ResourceValueListener) this;
	}

	@Override
	public void resourceChanged(Resource resource) {
		throw new IllegalStateException("PatternValueChangeListener does not expect any callbacks");
	}

//	@Override
//	public boolean isAbandoned() {
//		return false;
//	}
//
//	@Override
//	public boolean isRecursive() {
//		return false;
//	}

//	@Override
//	@SuppressWarnings("deprecation")
//	public org.ogema.core.resourcemanager.ResourceListener getListener() {
//		return null;
//	}

}
